name: "Build and push docker"
description: "Build and push docker image"

inputs:
  DOCKERHUB_USERNAME:
    description: "Dockerhub username used to read public images"
    required: true
  DOCKERHUB_TOKEN:
    description: "Dockerhub token used to read public images"
    required: true

  AWS_ACCESS_KEY_ID:
    description: "AWS access key used to write to ECR"
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: "AWS secret access key used to write to ECR"
    required: true
  AWS_CONFIG:
    description: "AWS config to use"
    required: false
  AWS_REGION:
    description: "AWS region"
    required: true

  AWS_ROLE_TO_ASSUME:
    description: "AWS role to use"
    required: false
  AWS_PROFILE:
    description: "AWS profile"
    required: false
    default: "voltti-sst" # TODO: remove in next version

  registry:
    description: "Image registry host"
    required: true
  name:
    description: "Name of the image. Example evaka/image"
    required: true
  path:
    description: "Docker context path"
    default: "."
    required: false
  build-args:
    description: "Docker build-args. See docker/build-push-action build-args"
    required: false
    default: ""
  suffix:
    description: "Tag suffix for images"
    default: null
  target:
    description: "Docker target"
    default: null
  lint_command:
    description: "Command used for linting. Example: yarn lint"
    default: null
  test_command:
    description: "Command used for linting. Example: yarn test"
    default: null
  push:
    description: "Push images to registry"
    default: true
  load:
    description: "Load docker image"
    default: false
  dockerfile:
    description: "Dockerfile path"
  ecr_type:
    default: 'ecr'
    description: "ecr or ecr-public"


outputs:
  image:
    description: "Full image name with registry and tag"
    value: ${{ steps.variables.outputs.image }}

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ inputs.DOCKERHUB_USERNAME }}
        password: ${{ inputs.DOCKERHUB_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}
        role-to-assume: ${{ inputs.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200
        mask-aws-account-id: false

    - name: Write AWS config
      if: ${{ inputs.AWS_CONFIG }}
      shell: bash
      run: |
        mkdir -p ~/.aws
        echo '${{ inputs.AWS_CONFIG }}' > ~/.aws/config

    - name: Login to ECR
      shell: bash
      if: ${{ inputs.AWS_PROFILE }}
      env:
        AWS_PROFILE: ${{ inputs.AWS_PROFILE }}
      run: |
        aws ${{ inputs.ecr_type }} get-login-password --region ${{ inputs.AWS_REGION }} | docker login --username AWS --password-stdin ${{ inputs.registry }}

    - name: Login to ECR
      shell: bash
      if: ${{ ! inputs.AWS_PROFILE }}
      run: |
        aws ${{ inputs.ecr_type }} get-login-password --region ${{ inputs.AWS_REGION }} | docker login --username AWS --password-stdin ${{ inputs.registry }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Set tag
      if: startsWith(github.ref, 'refs/tags/v')
      id: tag
      shell: bash
      run: |
        echo ::set-output name=name::${GITHUB_REF#refs/tags/}

    - name: Set variables
      id: variables
      shell: bash
      run: |
        echo ::set-output name=image::${{ inputs.registry }}/${{ inputs.name }}:${{ steps.tag.outputs.name || github.sha }}${{ inputs.suffix || '' }}

    - name: Build
      if: ${{ inputs.lint_command || inputs.test_command }}
      uses: docker/build-push-action@v2
      with:
        context: ${{ inputs.path }}
        push: false
        load: true
        target: ${{ inputs.target }}
        file: ${{ inputs.dockerfile }}
        build-args: ${{ inputs.build-args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: |
          ${{ steps.variables.outputs.image }}

    - name: Lint
      if: ${{ inputs.lint_command }}
      shell: bash
      run: docker run --rm --entrypoint "" "${{ steps.variables.outputs.image }}" ${{ inputs.lint_command }} 2>&1 | tee lint-report.txt

    - name: Test
      if: ${{ inputs.test_command }}
      shell: bash
      run: |
        docker run --rm --entrypoint "" "${{ steps.variables.outputs.image }}" ${{ inputs.test_command }} 2>&1 | tee test-report.txt

    - name: Store test results
      uses: actions/upload-artifact@v3
      if: always() && (inputs.lint_command || inputs.test_command)
      with:
        name: test-results
        path: "*-report.txt"
        retention-days: 2

    - name: Push
      if: inputs.push
      uses: docker/build-push-action@v2
      with:
        context: ${{ inputs.path }}
        load: ${{ inputs.load }}
        push: ${{ inputs.push }}
        target: ${{ inputs.target }}
        file: ${{ inputs.dockerfile }}
        build-args: ${{ inputs.build-args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: |
          ${{ steps.variables.outputs.image }}
